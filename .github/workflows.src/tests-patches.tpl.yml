<% from "tests.inc.yml" import build, calc_cache_key, restore_cache -%>

name: Tests of patching old EdgeDB Versions

on:
  workflow_dispatch:
    inputs: {}
  pull_request:
    branches:
      - release/*
  push:
    branches:
      - patch-test*
      - release/*

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    <%- call build() -%>
    - name: Compute cache keys
      run: |
        << calc_cache_key()|indent >>
    <%- endcall %>

  compute-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v4
    - id: set-matrix
      name: Compute versions to run on
      run: python3 .github/scripts/patches/compute-versions.py

  test:
    runs-on: ubuntu-latest
    needs: [build, compute-versions]
    strategy:
      fail-fast: false
      matrix: ${{fromJSON(needs.compute-versions.outputs.matrix)}}

    steps:
    <<- restore_cache() >>

    - name: Symlink the CLI
      run: |
        ln -sf gel "$(dirname "$(which gel)")/edgedb"

    - name: Download an earlier database version and set up a instance
      run: |
        wget -q "${{ matrix.edgedb-url }}"
        tar xzf ${{ matrix.edgedb-basename }}-${{ matrix.edgedb-version }}.tar.gz
        ${{ matrix.edgedb-basename }}-${{ matrix.edgedb-version }}/bin/edgedb-server -D test-dir --bootstrap-only --testmode

    - name: Create databases on the older version
      if: ${{ matrix.make-dbs }}
      run: |
        DIR=${{ matrix.edgedb-basename }}-${{ matrix.edgedb-version }}
        python3 .github/scripts/patches/create-databases.py $DIR/bin/edgedb-server
        (cd $DIR && GEL_SERVER_SECURITY=insecure_dev_mode ./bin/python3 -m edb.tools --no-devmode inittestdb --update -D ../test-dir -t ../tests -k test_edgeql_fts_regression)

    - name: Run tests with instance created on an older version
      run: |
        # Run the server explicitly first to do the upgrade, since edb test
        # has timeouts.
        edb server --bootstrap-only --data-dir test-dir
        # Should we run *all* the tests?
        edb test -j2 -v --data-dir test-dir tests/test_edgeql_json.py tests/test_edgeql_casts.py tests/test_edgeql_functions.py tests/test_edgeql_expressions.py tests/test_edgeql_policies.py tests/test_edgeql_vector.py tests/test_edgeql_scope.py tests/test_http_ext_auth.py tests/test_ext_ai.py tests/test_edgeql_ddl.py

        # Run the fts_regression tests directly against the old databases,
        # without running setup.
        edb test -j1 -k test_edgeql_fts_regression -v --data-dir test-dir --use-data-dir-dbs

    - name: Test downgrading a database after an upgrade
      if: ${{ !contains(matrix.edgedb-version, '-rc') && !contains(matrix.edgedb-version, '-beta') }}
      run: python3 .github/scripts/patches/test-downgrade.py ${{ matrix.edgedb-basename }}-${{ matrix.edgedb-version }}/bin/edgedb-server

  workflow-notifications:
    if: failure() && github.event_name != 'pull_request'
    name: Notify in Slack on failures
    needs:
      - build
      - compute-versions
      - test
    runs-on: ubuntu-latest
    permissions:
      actions: 'read'
    steps:
      - name: Slack Workflow Notification
        uses: Gamesight/slack-workflow-status@26a36836c887f260477432e4314ec3490a84f309
        with:
          repo_token: ${{secrets.GITHUB_TOKEN}}
          slack_webhook_url: ${{secrets.ACTIONS_SLACK_WEBHOOK_URL}}
          name: 'Workflow notifications'
          icon_emoji: ':hammer:'
          include_jobs: 'on-failure'
