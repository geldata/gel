import typing
import uuid
from . import name as sn
from . import objects as so

__all__ = ["Schema"]

class Schema:
    @staticmethod
    def empty() -> Schema: ...
    @staticmethod
    def parse_reflection(
        base_schema: Schema, reflected_json: str
    ) -> Schema: ...
    def dump(self, pretty: bool = False) -> str: ...
    def has_object(self, id: uuid.UUID) -> bool: ...
    def get_by_id(self, id: uuid.UUID) -> so.Object | None: ...
    def get_by_name(self, name: sn.Name) -> so.Object | None: ...
    def get_by_global_name[T](
        self, cls: type[T], name: sn.Name
    ) -> T | None: ...
    def get_by_short_name[T](
        self, cls: type[T], name: sn.Name
    ) -> tuple[T, ...] | None: ...
    def get_obj_data_raw(
        self, obj: so.Object
    ) -> tuple[typing.Any, ...]: ...
    def get_obj_field_raw(
        self, obj: so.Object, field_index: int
    ) -> typing.Any | None: ...
    def _get_object_ids(self) -> list[uuid.UUID]: ...
    def _get_global_name_ids(
        self,
    ) -> list[tuple[type[so.Object], uuid.UUID]]: ...
    def add_raw(
        self,
        id: uuid.UUID,
        sclass: type[so.Object],
        data: tuple[typing.Any],
    ) -> Schema: ...
    def delete(self, obj: so.Object) -> Schema: ...
    def delist(self, name: sn.Name) -> Schema: ...
    def set_obj_field(
        self,
        obj: so.Object,
        fieldname: str,
        value: typing.Any,
    ) -> Schema: ...
    def unset_obj_field(self, obj: so.Object, fieldname: str) -> Schema: ...
    def update_obj(
        self,
        obj: so.Object,
        updates: typing.Mapping[str, typing.Any],
    ) -> Schema: ...
    def get_referrers(
        self,
        obj: so.Object,
        referrer_class: type[so.Object] | None,
        referrer_field: str | None,
    ) -> frozenset[so.Object]: ...
    def get_referrers_ex(
        self,
        obj: so.Object,
        referrer_class: type[so.Object] | None,
    ) -> dict[tuple[type[so.Object], str], frozenset[so.Object]]: ...
